generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DB_URL")
}

model User {
  id          Int            @id @default(autoincrement())
  username    String         @unique
  otp         Int?
  otpExpireAt DateTime?
  avatar      Bytes?
  address     String?
  phoneNumber String         @unique
  randomInt   Int            @default(0)
  gender      Gender?
  orders      Order[]
  seller      Seller?
  teamMembers TeamMember[]
  followers   Relationship[] @relation("follower")
  followings  Relationship[] @relation("following")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Review      Review[]
}

model Seller {
  id            Int       @id @default(autoincrement())
  userId        Int       @unique
  brandName     String
  active        Boolean   @default(false)
  bio           String
  category      String
  contactNumber String
  email         String
  storeAddress  String
  type          String
  products      Product[]
  user          User      @relation(fields: [userId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Relationship {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Category {
  id           Int       @id @default(autoincrement())
  categoryName String
  products     Product[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  price         Float
  categoryId    Int
  otherDetails  Json?
  stockQuantity Int
  imageLink     String?
  teamPrice     Float
  teamSize      Int
  sellerId      Int
  teams         Team[]
  orders        Order[]
  reviews       Review[]
  category      Category @relation(fields: [categoryId], references: [id])
  seller        Seller   @relation(fields: [sellerId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Review {
  id          Int      @id @default(autoincrement())
  productId   Int
  userId      Int
  rating      Float
  description String?
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Team {
  id          Int          @id @default(autoincrement())
  description String?
  code        String?
  teamLink    String?
  expireAt    DateTime     @default(dbgenerated("(now() + '30 minutes'::interval minute)"))
  productId   Int?
  teamStatus  TeamStatus   @default(teamCreated)
  teamMembers TeamMember[]
  Product     Product?     @relation(fields: [productId], references: [id])
  Order       Order[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  teamId    Int
  userId    Int
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           Int          @id @default(autoincrement())
  userId       Int
  productId    Int?
  quantity     Int          @default(1)
  totalPrice   Float
  teamId       Int?
  purchaseType PurchaseType @default(team)
  orderStatus  OrderStatus  @default(orderPlaced)
  team         Team?        @relation(fields: [teamId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  Product      Product?     @relation(fields: [productId], references: [id])
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum TeamStatus {
  teamCreated
  teamConfirmed
  teamExpired
}

enum PurchaseType {
  individual
  team
}

enum OrderStatus {
  orderPlaced
  productShipped
  productDelivered
}
