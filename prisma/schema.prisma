generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("LOCAL_DB_URL")
}

model User {
  id          Int            @id @default(autoincrement())
  username    String         @unique
  otp         Int?
  otpExpireAt DateTime?
  avatar      Bytes?
  phoneNumber String         @unique
  randomInt   Int            @default(0)
  gender      Gender?
  orders      Order[]
  seller      Seller?
  teamMembers TeamMember[]
  followers   Relationship[] @relation("follower")
  followings  Relationship[] @relation("following")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  Review      Review[]
  VideoLike   VideoLike[]
  address     Address?
}

model Address {
  id       Int     @id @default(autoincrement())
  userId   Int?    @unique
  sellerId Int?    @unique
  address1 String
  address2 String?
  city     String
  state    String?
  country  String
  pincode  String
  user     User?   @relation(fields: [userId], references: [id])
  seller   Seller? @relation(fields: [sellerId], references: [id])
}

model Seller {
  id             Int          @id
  active         Boolean      @default(false)
  brandName      String
  bio            String
  contactNumber  String
  email          String
  type           String
  categoryId     Int
  deliveryType   DeliveryType
  deliveryFee    Int?
  deliveryRadius Int?
  thirdPartyLink String?
  shopOpen       Boolean      @default(false)
  products       Product[]
  category       Category     @relation(fields: [categoryId], references: [id])
  user           User         @relation(fields: [id], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  LiveStream     LiveStream[]
  address        Address?
}

model Relationship {
  id          Int      @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    User     @relation("follower", fields: [followerId], references: [id])
  following   User     @relation("following", fields: [followingId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
}

model Category {
  id           Int      @id @default(autoincrement())
  categoryName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  Seller       Seller[]
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String
  description   String?
  price         Float
  stockQuantity Int
  imageLink     String?
  teamPrice     Float
  teamSize      Int
  sellerId      Int
  teams         Team[]
  orders        Order[]
  reviews       Review[]
  seller        Seller   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  Video         Video[]
}

model Review {
  id          Int      @id @default(autoincrement())
  productId   Int
  orderId     Int?     @unique
  userId      Int
  rating      Float
  description String?
  order       Order?   @relation(fields: [orderId], references: [id])
  product     Product  @relation(fields: [productId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Team {
  id          Int          @id @default(autoincrement())
  description String?
  code        String?
  teamLink    String?
  expireAt    DateTime     @default(dbgenerated("(now() + '30 minutes'::interval minute)"))
  productId   Int?
  teamStatus  TeamStatus   @default(teamCreated)
  teamMembers TeamMember[]
  Product     Product?     @relation(fields: [productId], references: [id])
  Order       Order[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  teamId    Int
  userId    Int
  team      Team     @relation(fields: [teamId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([teamId, userId])
}

model Order {
  id           Int          @id @default(autoincrement())
  userId       Int
  productId    Int
  quantity     Int          @default(1)
  totalPrice   Float
  teamId       Int?
  purchaseType PurchaseType @default(team)
  orderStatus  OrderStatus  @default(orderPlaced)
  team         Team?        @relation(fields: [teamId], references: [id])
  user         User         @relation(fields: [userId], references: [id])
  Product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  review       Review?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model LiveStream {
  id          Int      @id @default(autoincrement())
  meetId      String
  description String?
  thumbnail   String?
  sellerId    Int
  expiresAt   DateTime @default(dbgenerated("(now() + '60 minutes'::interval minute)"))
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Seller      Seller   @relation(fields: [sellerId], references: [id])
}

model Video {
  id              Int           @id @default(autoincrement())
  productId       Int
  videoMetaDataId Int           @unique
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  videoMetaData   VideoMetaData @relation(fields: [videoMetaDataId], references: [id], onDelete: Cascade)
  product         Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  VideoLike       VideoLike[]

  @@index([productId])
}

model VideoMetaData {
  id           Int      @id @default(autoincrement())
  url          String   @unique
  processedUrl String?
  thumbnailUrl String?
  video        Video?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VideoLike {
  userId    Int
  videoId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@id([userId, videoId])
}

model WaitList {
  id          Int      @id @default(autoincrement())
  name        String
  location    String
  email       String   @unique
  phoneNumber String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum TeamStatus {
  teamCreated
  teamConfirmed
  teamExpired
}

enum PurchaseType {
  individual
  team
}

enum OrderStatus {
  orderPlaced
  orderConfirmed
  productShipped
  productDelivered
  orderExpired
}

enum DeliveryType {
  noDelivery
  thirdPartyDelivery
  ownDelivery
}
